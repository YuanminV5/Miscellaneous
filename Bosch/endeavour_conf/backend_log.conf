input
{
	# OPERATIONALMANAGEMENT,LICENSING,CONFIGURATION,FIER,COMMON,VIDEO,DIB-HOST,DIB-SERVICE
	file
	{
		path => [ "C:/ProgramData/Bosch/NGSMS/*Endeavour.*.log", "C:/ProgramData/Bosch/NGSMS/*Endeavour.*.*.log" ]
		exclude => [ "*Endeavour.*.Trace.log", "*Endeavour.*.Trace.*.log", "*Endeavour.*.Redis.log", "*Endeavour.*.Redis.*.log", "*Endeavour.DeveloperIdentityProvider.log", "*Endeavour.DeveloperIdentityProvider.*.log", "*Endeavour.MicroExecutionContainer.log", "*Endeavour.MicroExecutionContainer.*.log" ]
		start_position => 'beginning'
		ignore_older => 604800
		
		# MUST HAVE FOR EACH INPUT
		add_field => { "[@metadata][logtype]" => "runtime_log" "[@metadata][configtype]" => "backendlog" }
		
		# Lines not starting with a date will be merged to previous line
		codec => multiline 
		{
			pattern => "^%{TIMESTAMP_ISO8601}"
			negate => true
			what => "previous"
		}
	}
	
	# DeveloperIdentity
	file
	{	
		path => [ "C:/ProgramData/Bosch/NGSMS/*Endeavour.DeveloperIdentityProvider.log" ]
		start_position => 'beginning'
		ignore_older => 604800
		
		# MUST HAVE FOR EACH INPUT
		add_field => 
		{ 
			"[@metadata][logtype]" => "developeridentity_log"
			"[@metadata][configtype]" => "backendlog" 
		}
		
		# Lines starting with space character will be merged to previous line
		codec => multiline 
		{
			pattern => "^\s"
			what => "previous"
		}
	}
	
	# MicroExecutionContainer
	file
	{
		path => [ "C:/ProgramData/Bosch/NGSMS/*Endeavour.MicroExecutionContainer.log", "C:/ProgramData/Bosch/NGSMS/*Endeavour.MicroExecutionContainer.*.log" ]
		start_position => 'beginning'
		ignore_older => 604800
		
		# MUST HAVE FOR EACH INPUT
		add_field => 
		{ 
			"[@metadata][logtype]" => "microexecutioncontainer_log"
			"[@metadata][configtype]" => "backendlog"
		}
		
		# Lines starting with space character will be merged to previous line
		codec => multiline
		{
		  pattern => "^(\[%{NUMBER}\]\s)?%{TIMESTAMP_ISO8601}"
		  negate => true
		  what => "previous"
		}
	}	
}

filter
{			
	# Only apply this filter on input from this config file
	if [@metadata][configtype] == "backendlog"
	{	
		# Remove newline character
		mutate
		{
			gsub => [ "message", "[\r\n]", "" ]
		}
			
		# Get filename, for temporary use, will be removed
		grok
		{
			patterns_dir => [ "..\config\endeavour_conf\patterns" ]
			match => { "path" => "%{FILENAME}" }
		}

		# Get modulename(FIER,TRACKING,DeveloperIdentityProvider,Redis and etc), for temporary use, will be removed
		grok
		{
			patterns_dir => [ "..\config\endeavour_conf\patterns" ]
			match => { "filename" => "%{MODULENAME}" }
		}
		
		# Save modulename in metadata, this will be used as document_type for elasticsearch
		mutate
		{
			add_field => { "[@metadata][type]" => "%{modulename}" }
		}
		
		# Apply patterns based on logtype
		if [@metadata][logtype] == "runtime_log"
		{
			grok
			{ 
				patterns_dir => [ "..\config\endeavour_conf\patterns" ]
				match =>
				{
					"message" => [ "%{RUNTIMELOG}" ]
				}
				overwrite => [ "message" ]
			}
		}
		else if [@metadata][logtype] == "developeridentity_log"
		{
			# Drop events that do not start with a timestamp
			if [message] =~ "^--"
			{
				drop { }
			}
			
			grok 
			{
				patterns_dir => [ "..\config\endeavour_conf\patterns" ]
				match => { "message" => "%{DEVELOPERIDENTITYLOG}" }
				overwrite => [ "message" ]
			}
		}
		else if [@metadata][logtype] == "microexecutioncontainer_log"
		{
			grok 
			{ 
				patterns_dir => [ "..\config\endeavour_conf\patterns" ]
				match => 
				{
					"message" => [ "%{MICROEXECUTIONCONTAINERLOG}" ]
				}
				overwrite => [ "message" ]
			}
		}
		
		# Using event timestamp as the logstash timestamp for the event
		date
		{
			match => [ "timestamp" , "yyyy-MM-dd HH:mm:ss,SSSSSSS" ]
			timezone => "Etc/UTC"
		}
		
		# Remove bracket character in message
		mutate 
		{
			gsub => [ "message", "[\[\]]", "" ]
		}
		
		grok 
		{
			match => { "timestamp" => "(?<date>%{YEAR}-%{MONTHNUM}-%{MONTHDAY})" }
		}
		
		mutate
		{ 
			add_field => { "[@metadata][esindex]" => "%{[@metadata][logtype]}_%{date}" }
			remove_field => [ "filename", "modulename", "timestamp", "date" ]
			remove_tag => [ "multiline" ]
		}
	}
}

output
{
	if [@metadata][configtype] == "backendlog"
	{
		elasticsearch
		{
			hosts => [ "localhost:9200" ]
			index => "%{[@metadata][esindex]}"
			document_type => "%{[@metadata][type]}"
		}
	}
}